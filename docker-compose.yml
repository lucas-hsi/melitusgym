services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: healthtrack_db
    environment:
      POSTGRES_DB: healthtrack
      POSTGRES_USER: healthtrack_user
      POSTGRES_PASSWORD: healthtrack_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - healthtrack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthtrack_user -d healthtrack"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: healthtrack_backend
    environment:
      - DATABASE_URL=postgresql://healthtrack_user:healthtrack_pass@db:5432/healthtrack
      - USE_SQLITE=false
      - JWT_SECRET_KEY=melitus-gym-super-secret-key-2024-production
      - CORS_ORIGINS=["http://127.0.0.1:3000","http://localhost:3000"]
      - ENVIRONMENT=production
      - CRYPTOGRAPHY_DONT_BUILD_RUST=1
      - BCRYPT_DONT_BUILD_RUST=1
      - PIP_PREFER_BINARY=1
      - PIP_NO_CACHE_DIR=1
      - ENABLE_ADMIN_RESET=true
      - ADMIN_RESET_TOKEN=init-reset-2025
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - healthtrack_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: healthtrack_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://127.0.0.1:8000/api
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - healthtrack_network

volumes:
  postgres_data:
    driver: local

networks:
  healthtrack_network:
    driver: bridge