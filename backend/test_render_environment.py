#!/usr/bin/env python3
"""
Script completo para simular ambiente Render localmente
Testa tudo que pode dar erro no deploy
"""

import subprocess
import sys
import os
import tempfile
import venv
from pathlib import Path
import json

class RenderSimulator:
    def __init__(self):
        self.test_dir = None
        self.venv_path = None
        self.results = []
        
    def log(self, message, status="INFO"):
        """Log com status"""
        icons = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è"}
        print(f"{icons.get(status, '‚ÑπÔ∏è')} {message}")
        
    def run_in_venv(self, command, description):
        """Executa comando no ambiente virtual"""
        self.log(f"Executando: {description}")
        
        # Ativar venv e executar comando
        if os.name == 'nt':  # Windows
            activate_script = self.venv_path / "Scripts" / "activate.bat"
            full_command = f'"{activate_script}" && {command}'
        else:  # Linux/Mac
            activate_script = self.venv_path / "bin" / "activate"
            full_command = f'source "{activate_script}" && {command}'
        
        try:
            result = subprocess.run(
                full_command,
                shell=True,
                capture_output=True,
                text=True,
                timeout=600,  # 10 minutos
                cwd=self.test_dir
            )
            
            if result.returncode == 0:
                self.log(f"{description} - SUCESSO", "SUCCESS")
                return True, result.stdout
            else:
                self.log(f"{description} - ERRO", "ERROR")
                self.log(f"STDERR: {result.stderr}", "ERROR")
                return False, result.stderr
                
        except subprocess.TimeoutExpired:
            self.log(f"{description} - TIMEOUT", "ERROR")
            return False, "Timeout"
        except Exception as e:
            self.log(f"{description} - EXCE√á√ÉO: {e}", "ERROR")
            return False, str(e)
    
    def setup_test_environment(self):
        """Configura ambiente de teste"""
        self.log("Configurando ambiente de teste...")
        
        # Criar diret√≥rio tempor√°rio
        self.test_dir = Path(tempfile.mkdtemp(prefix="melitus_test_"))
        self.log(f"Diret√≥rio de teste: {self.test_dir}")
        
        # Copiar arquivos necess√°rios
        current_dir = Path(__file__).parent
        files_to_copy = [
            "requirements.txt",
            "start.sh",
            "runtime.txt",
            ".python-version"
        ]
        
        for file_name in files_to_copy:
            src = current_dir / file_name
            if src.exists():
                dst = self.test_dir / file_name
                dst.write_text(src.read_text(), encoding='utf-8')
                self.log(f"Copiado: {file_name}")
        
        # Copiar diret√≥rio app
        app_src = current_dir / "app"
        if app_src.exists():
            app_dst = self.test_dir / "app"
            self.copy_directory(app_src, app_dst)
            self.log("Copiado: diret√≥rio app")
        
        return True
    
    def copy_directory(self, src, dst):
        """Copia diret√≥rio recursivamente"""
        dst.mkdir(exist_ok=True)
        for item in src.iterdir():
            if item.is_file():
                (dst / item.name).write_bytes(item.read_bytes())
            elif item.is_dir() and item.name != "__pycache__":
                self.copy_directory(item, dst / item.name)
    
    def create_virtual_environment(self):
        """Cria ambiente virtual Python 3.11"""
        self.log("Criando ambiente virtual Python 3.11...")
        
        self.venv_path = self.test_dir / "venv"
        
        try:
            venv.create(self.venv_path, with_pip=True)
            self.log("Ambiente virtual criado", "SUCCESS")
            return True
        except Exception as e:
            self.log(f"Erro ao criar venv: {e}", "ERROR")
            return False
    
    def test_python_version(self):
        """Testa vers√£o do Python"""
        self.log("Testando vers√£o Python...")
        
        success, output = self.run_in_venv("python --version", "Verifica√ß√£o vers√£o Python")
        
        if success and "3.11" in output:
            self.log("Python 3.11 detectado", "SUCCESS")
            return True
        else:
            self.log(f"Vers√£o Python incorreta: {output}", "ERROR")
            return False
    
    def test_environment_variables(self):
        """Testa vari√°veis de ambiente"""
        self.log("Configurando vari√°veis de ambiente...")
        
        env_vars = {
            'CRYPTOGRAPHY_DONT_BUILD_RUST': '1',
            'BCRYPT_DONT_BUILD_RUST': '1',
            'PIP_PREFER_BINARY': '1',
            'PIP_NO_CACHE_DIR': '1'
        }
        
        # Criar script para definir vari√°veis
        env_script = self.test_dir / "set_env.py"
        env_script.write_text(f"""
import os
env_vars = {env_vars}
for key, value in env_vars.items():
    os.environ[key] = value
    print(f"{{key}}={{value}}")
print("Vari√°veis configuradas!")
""")
        
        success, output = self.run_in_venv("python set_env.py", "Configura√ß√£o vari√°veis ambiente")
        return success
    
    def test_dependencies_installation(self):
        """Testa instala√ß√£o de depend√™ncias"""
        self.log("Testando instala√ß√£o de depend√™ncias...")
        
        # Comando exato usado no Render
        install_cmd = "pip install --prefer-binary --no-cache-dir --no-compile --only-binary=all -r requirements.txt"
        
        success, output = self.run_in_venv(install_cmd, "Instala√ß√£o depend√™ncias")
        
        if success:
            self.log("Depend√™ncias instaladas com sucesso", "SUCCESS")
            return True
        else:
            self.log("Falha na instala√ß√£o de depend√™ncias", "ERROR")
            return False
    
    def test_critical_imports(self):
        """Testa importa√ß√µes cr√≠ticas"""
        self.log("Testando importa√ß√µes cr√≠ticas...")
        
        import_script = self.test_dir / "test_imports.py"
        import_script.write_text("""
import sys
critical_modules = [
    'fastapi',
    'uvicorn', 
    'sqlmodel',
    'psycopg2',
    'alembic',
    'cryptography',
    'jose',
    'bcrypt',
    'passlib',
    'httpx',
    'pydantic',
    'pydantic_settings'
]

failed = []
for module in critical_modules:
    try:
        __import__(module)
        print(f"‚úÖ {module}")
    except ImportError as e:
        print(f"‚ùå {module}: {e}")
        failed.append(module)

if failed:
    print(f"FALHAS: {failed}")
    sys.exit(1)
else:
    print("TODAS IMPORTA√á√ïES OK!")
    sys.exit(0)
""")
        
        success, output = self.run_in_venv("python test_imports.py", "Teste importa√ß√µes")
        return success
    
    def test_app_initialization(self):
        """Testa inicializa√ß√£o da aplica√ß√£o"""
        self.log("Testando inicializa√ß√£o da aplica√ß√£o...")
        
        app_test_script = self.test_dir / "test_app.py"
        app_test_script.write_text("""
import sys
import os
sys.path.insert(0, '.')

try:
    from app.main import app
    print("‚úÖ App importada com sucesso")
    
    # Verificar se √© uma inst√¢ncia FastAPI
    if hasattr(app, 'openapi'):
        print("‚úÖ FastAPI configurado corretamente")
        print("‚úÖ Aplica√ß√£o pronta para produ√ß√£o!")
        sys.exit(0)
    else:
        print("‚ùå App n√£o √© uma inst√¢ncia FastAPI v√°lida")
        sys.exit(1)
        
except Exception as e:
    print(f"‚ùå Erro na inicializa√ß√£o: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
""")
        
        success, output = self.run_in_venv("python test_app.py", "Teste inicializa√ß√£o app")
        return success
    
    def run_full_test(self):
        """Executa teste completo"""
        self.log("üî• INICIANDO SIMULA√á√ÉO COMPLETA DO RENDER", "INFO")
        self.log("=" * 60)
        
        tests = [
            ("Setup Ambiente", self.setup_test_environment),
            ("Criar Virtual Env", self.create_virtual_environment),
            ("Vers√£o Python", self.test_python_version),
            ("Vari√°veis Ambiente", self.test_environment_variables),
            ("Instala√ß√£o Deps", self.test_dependencies_installation),
            ("Importa√ß√µes", self.test_critical_imports),
            ("Inicializa√ß√£o App", self.test_app_initialization)
        ]
        
        results = []
        
        for test_name, test_func in tests:
            self.log(f"\nüß™ TESTE: {test_name}")
            self.log("-" * 40)
            
            try:
                success = test_func()
                results.append((test_name, success))
                
                if success:
                    self.log(f"{test_name} - PASSOU", "SUCCESS")
                else:
                    self.log(f"{test_name} - FALHOU", "ERROR")
                    
            except Exception as e:
                self.log(f"{test_name} - EXCE√á√ÉO: {e}", "ERROR")
                results.append((test_name, False))
        
        # Relat√≥rio final
        self.log("\n" + "=" * 60)
        self.log("üìä RELAT√ìRIO FINAL DA SIMULA√á√ÉO")
        self.log("=" * 60)
        
        passed = 0
        total = len(results)
        
        for test_name, success in results:
            status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
            self.log(f"{test_name:20} {status}")
            if success:
                passed += 1
        
        self.log(f"\nRESULTADO: {passed}/{total} testes passaram")
        
        if passed == total:
            self.log("üéâ TODOS OS TESTES PASSARAM!", "SUCCESS")
            self.log("üöÄ SEU PROJETO EST√Å PRONTO PARA O RENDER!", "SUCCESS")
            return True
        else:
            self.log("‚ö†Ô∏è ALGUNS TESTES FALHARAM!", "WARNING")
            self.log("üîß Corrija os problemas antes do deploy", "WARNING")
            return False
    
    def cleanup(self):
        """Limpa arquivos tempor√°rios"""
        if self.test_dir and self.test_dir.exists():
            import shutil
            try:
                shutil.rmtree(self.test_dir)
                self.log("Limpeza conclu√≠da")
            except Exception as e:
                self.log(f"Erro na limpeza: {e}", "WARNING")

def main():
    simulator = RenderSimulator()
    
    try:
        success = simulator.run_full_test()
        return 0 if success else 1
    except KeyboardInterrupt:
        simulator.log("Teste interrompido pelo usu√°rio", "WARNING")
        return 1
    except Exception as e:
        simulator.log(f"Erro inesperado: {e}", "ERROR")
        return 1
    finally:
        simulator.cleanup()

if __name__ == "__main__":
    sys.exit(main())