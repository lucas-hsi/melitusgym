#!/usr/bin/env python3
"""
Script de teste para validar configura√ß√µes antes do deploy
Simula as vari√°veis de ambiente do Railway para detectar problemas
"""

import os
import sys
import json
from pathlib import Path

# Adicionar o diret√≥rio do app ao path
sys.path.insert(0, str(Path(__file__).parent / "app"))

def test_cors_parsing():
    """Testa diferentes formatos de CORS_ORIGINS"""
    print("üß™ Testando parsing de CORS_ORIGINS...")
    
    test_cases = [
        # Formato CSV (recomendado para Railway)
        "http://127.0.0.1:3000,http://localhost:3000,https://tranquil-vitality-production-15a2.up.railway.app",
        
        # Formato JSON v√°lido
        '["http://127.0.0.1:3000","http://localhost:3000","https://tranquil-vitality-production-15a2.up.railway.app"]',
        
        # String vazia (deve usar padr√£o)
        "",
        
        # None (deve usar padr√£o)
        None,
        
        # Formato JSON malformado (deve fazer fallback)
        '["http://127.0.0.1:3000","http://localhost:3000"',
    ]
    
    for i, test_value in enumerate(test_cases):
        print(f"\n  Teste {i+1}: {repr(test_value)}")
        
        # Configurar vari√°vel de ambiente
        if test_value is not None:
            os.environ["CORS_ORIGINS"] = test_value
        else:
            os.environ.pop("CORS_ORIGINS", None)
        
        try:
            # Importar e testar configura√ß√£o
            from app.core.config import Settings
            settings = Settings()
            print(f"    ‚úÖ Resultado: {settings.cors_origins}")
        except Exception as e:
            print(f"    ‚ùå Erro: {e}")

def test_database_url():
    """Testa configura√ß√£o de DATABASE_URL"""
    print("\nüß™ Testando configura√ß√£o de DATABASE_URL...")
    
    # Simular vari√°veis do Railway
    railway_vars = {
        "DATABASE_URL": "postgresql://postgres:password@localhost:5432/melitusgym",
        "POSTGRES_USER": "postgres",
        "POSTGRES_PASSWORD": "password", 
        "POSTGRES_HOST": "localhost",
        "POSTGRES_PORT": "5432",
        "POSTGRES_DB": "melitusgym"
    }
    
    for key, value in railway_vars.items():
        os.environ[key] = value
    
    try:
        from app.core.config import Settings
        settings = Settings()
        db_url = settings.get_database_url()
        print(f"    ‚úÖ DATABASE_URL: {db_url}")
    except Exception as e:
        print(f"    ‚ùå Erro: {e}")

def test_jwt_config():
    """Testa configura√ß√£o JWT"""
    print("\nüß™ Testando configura√ß√£o JWT...")
    
    jwt_vars = {
        "JWT_SECRET_KEY": "test-secret-key-minimum-32-characters-long",
        "JWT_ALGORITHM": "HS256",
        "JWT_ACCESS_TOKEN_EXPIRE_MINUTES": "30"
    }
    
    for key, value in jwt_vars.items():
        os.environ[key] = value
    
    try:
        from app.core.config import Settings
        settings = Settings()
        print(f"    ‚úÖ JWT Secret: {settings.jwt_secret_key[:10]}...")
        print(f"    ‚úÖ JWT Algorithm: {settings.jwt_algorithm}")
        print(f"    ‚úÖ JWT Expire: {settings.jwt_access_token_expire_minutes} min")
    except Exception as e:
        print(f"    ‚ùå Erro: {e}")

def test_full_config():
    """Testa configura√ß√£o completa simulando Railway"""
    print("\nüß™ Testando configura√ß√£o completa (simulando Railway)...")
    
    # Vari√°veis t√≠picas do Railway
    railway_env = {
        "ENVIRONMENT": "production",
        "DATABASE_URL": "postgresql://postgres:password@localhost:5432/melitusgym",
        "JWT_SECRET_KEY": "production-secret-key-minimum-32-characters-long",
        "CORS_ORIGINS": "https://tranquil-vitality-production-15a2.up.railway.app,http://127.0.0.1:3000",
        "LOG_LEVEL": "INFO",
        "DEBUG": "false"
    }
    
    # Limpar vari√°veis existentes
    for key in list(os.environ.keys()):
        if key.startswith(("CORS_", "JWT_", "DATABASE_", "POSTGRES_")):
            del os.environ[key]
    
    # Configurar vari√°veis do Railway
    for key, value in railway_env.items():
        os.environ[key] = value
    
    try:
        from app.core.config import Settings
        settings = Settings()
        
        print(f"    ‚úÖ Environment: {settings.environment}")
        print(f"    ‚úÖ CORS Origins: {settings.cors_origins}")
        print(f"    ‚úÖ Database URL: {settings.get_database_url()[:30]}...")
        print(f"    ‚úÖ JWT configured: {'Yes' if settings.jwt_secret_key else 'No'}")
        print(f"    ‚úÖ Debug mode: {settings.debug}")
        
    except Exception as e:
        print(f"    ‚ùå Erro na configura√ß√£o completa: {e}")
        import traceback
        traceback.print_exc()

def main():
    """Executa todos os testes de configura√ß√£o"""
    print("üîç AUDITORIA DE CONFIGURA√á√ÉO - MELITUS GYM")
    print("=" * 50)
    
    test_cors_parsing()
    test_database_url()
    test_jwt_config()
    test_full_config()
    
    print("\n" + "=" * 50)
    print("‚úÖ Auditoria de configura√ß√£o conclu√≠da!")
    print("\nüìã CHECKLIST PARA RAILWAY:")
    print("1. Configure CORS_ORIGINS como CSV: https://seu-app.railway.app,http://127.0.0.1:3000")
    print("2. Configure DATABASE_URL com a string completa do PostgreSQL")
    print("3. Configure JWT_SECRET_KEY com pelo menos 32 caracteres")
    print("4. Configure ENVIRONMENT=production")
    print("5. Configure LOG_LEVEL=INFO")

if __name__ == "__main__":
    main()