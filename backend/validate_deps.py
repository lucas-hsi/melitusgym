#!/usr/bin/env python3
"""
Script para validar depend√™ncias antes do deploy no Render
Simula exatamente o ambiente de produ√ß√£o
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(cmd, description):
    """Executa comando e retorna resultado"""
    print(f"\nüîç {description}")
    print(f"Executando: {cmd}")
    
    try:
        result = subprocess.run(
            cmd, 
            shell=True, 
            capture_output=True, 
            text=True,
            timeout=300  # 5 minutos timeout
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - SUCESSO")
            return True
        else:
            print(f"‚ùå {description} - ERRO")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - TIMEOUT (5 min)")
        return False
    except Exception as e:
        print(f"üí• {description} - EXCE√á√ÉO: {e}")
        return False

def validate_python_version():
    """Valida vers√£o do Python"""
    print("\nüêç VALIDANDO VERS√ÉO PYTHON")
    
    version = sys.version_info
    expected_major, expected_minor = 3, 11
    
    if version.major == expected_major and version.minor == expected_minor:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - COMPAT√çVEL")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - INCOMPAT√çVEL")
        print(f"   Esperado: Python {expected_major}.{expected_minor}.x")
        return False

def validate_requirements():
    """Valida instala√ß√£o de depend√™ncias"""
    print("\nüì¶ VALIDANDO DEPEND√äNCIAS")
    
    # Configurar vari√°veis de ambiente
    env_vars = {
        'CRYPTOGRAPHY_DONT_BUILD_RUST': '1',
        'BCRYPT_DONT_BUILD_RUST': '1',
        'PIP_PREFER_BINARY': '1',
        'PIP_NO_CACHE_DIR': '1'
    }
    
    for key, value in env_vars.items():
        os.environ[key] = value
        print(f"üîß {key}={value}")
    
    # Comando de instala√ß√£o (igual ao Render)
    install_cmd = "pip install --prefer-binary --no-cache-dir --no-compile --only-binary=all -r requirements.txt"
    
    return run_command(install_cmd, "Instala√ß√£o de depend√™ncias")

def validate_imports():
    """Valida importa√ß√£o de m√≥dulos cr√≠ticos"""
    print("\nüîó VALIDANDO IMPORTA√á√ïES")
    
    critical_modules = [
        'fastapi',
        'uvicorn',
        'sqlmodel',
        'psycopg2',
        'alembic',
        'cryptography',
        'jose',
        'bcrypt',
        'passlib',
        'httpx',
        'pydantic',
        'pydantic_settings'
    ]
    
    failed_imports = []
    
    for module in critical_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ùå {module} - {e}")
            failed_imports.append(module)
    
    return len(failed_imports) == 0

def validate_app_startup():
    """Valida se a aplica√ß√£o consegue inicializar"""
    print("\nüöÄ VALIDANDO INICIALIZA√á√ÉO DA APP")
    
    try:
        # Importar app principal
        from app.main import app
        print("‚úÖ Importa√ß√£o da app principal")
        
        # Verificar se FastAPI foi criado corretamente
        if hasattr(app, 'openapi'):
            print("‚úÖ FastAPI configurado corretamente")
            return True
        else:
            print("‚ùå FastAPI n√£o configurado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    print("üî• MELITUS GYM - VALIDA√á√ÉO PR√â-DEPLOY")
    print("=" * 50)
    
    # Lista de valida√ß√µes
    validations = [
        ("Vers√£o Python", validate_python_version),
        ("Depend√™ncias", validate_requirements),
        ("Importa√ß√µes", validate_imports),
        ("Inicializa√ß√£o App", validate_app_startup)
    ]
    
    results = []
    
    for name, validation_func in validations:
        try:
            success = validation_func()
            results.append((name, success))
        except Exception as e:
            print(f"üí• Erro inesperado em {name}: {e}")
            results.append((name, False))
    
    # Relat√≥rio final
    print("\n" + "=" * 50)
    print("üìä RELAT√ìRIO FINAL")
    print("=" * 50)
    
    all_passed = True
    for name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"{name:20} {status}")
        if not success:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ TODAS AS VALIDA√á√ïES PASSARAM!")
        print("üöÄ Pronto para deploy no Render!")
        return 0
    else:
        print("‚ö†Ô∏è  ALGUMAS VALIDA√á√ïES FALHARAM!")
        print("üîß Corrija os problemas antes do deploy")
        return 1

if __name__ == "__main__":
    sys.exit(main())